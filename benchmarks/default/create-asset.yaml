---
test:
  name: create-asset-size-ramp-levelDB
  description: This is a duration based benchmark targeting a Hyperledger Fabric network with a LevelDB world state database using the `fixed-asset` NodeJS chaincode contract that is interacted with via
    a Fabric-SDK-Node Gateway. Each test round invokes the `createAsset` method, with successive rounds increasing the bytesize of the asset
    added into the world state database.
  workers:
    type: local
    number: 10
  rounds:
  # - label: create-asset-8000-fixed-tps
  #   description: Test a submitTransaction() Gateway method against the NodeJS `fixed-asset` Smart Contract method named `createAsset`, which inserts an asset of size 8000 bytes into the World State database at a fixed TPS rate.
  #   chaincodeID: fixed-asset
  #   txDuration: 30
  #   rateControl:  { type: fixed-rate,  opts: { tps: 15} }
  #   arguments:
  #     chaincodeID: fixed-asset
  #     bytesize: 8000
  #   callback: benchmarks/lib/create-asset.js
  # - label: create-asset-100
  #   description: Test a submitTransaction() Gateway method against the NodeJS `fixed-asset` Smart Contract method named `createAsset`, which inserts an asset of size 100 bytes into the World State database.
  #   chaincodeID: fixed-asset
  #   txDuration: 300
  #   rateControl: { type: fixed-backlog,  opts: { unfinished_per_client: 10 } }
  #   arguments:
  #     chaincodeID: fixed-asset
  #     bytesize: 100
  #   callback: benchmarks/lib/create-asset.js
  # - label: create-asset-1000
  #   description: Test a submitTransaction() Gateway method against the NodeJS `fixed-asset` Smart Contract method named `createAsset`, which inserts an asset of size 1000 bytes into the World State database.
  #   chaincodeID: fixed-asset
  #   txDuration: 300
  #   rateControl: { type: fixed-backlog,  opts: { unfinished_per_client: 10 } }
  #   arguments:
  #     chaincodeID: fixed-asset
  #     bytesize: 1000
  #   callback: benchmarks/lib/create-asset.js
  # - label: create-asset-4000
  #   description: Test a submitTransaction() Gateway method against the NodeJS `fixed-asset` Smart Contract method named `createAsset`, which inserts an asset of size 4000 bytes into the World State database.
  #   chaincodeID: fixed-asset
  #   txDuration: 300
  #   rateControl: { type: fixed-backlog,  opts: { unfinished_per_client: 10 } }
  #   arguments:
  #     chaincodeID: fixed-asset
  #     bytesize: 4000
  #   callback: benchmarks/lib/create-asset.js
  # - label: create-asset-8000
  #   description: Test a submitTransaction() Gateway method against the NodeJS `fixed-asset` Smart Contract method named `createAsset`, which inserts an asset of size 8000 bytes into the World State database.
  #   chaincodeID: fixed-asset
  #   txDuration: 300
  #   rateControl: { type: fixed-backlog,  opts: { unfinished_per_client: 10 } }
  #   arguments:
  #     chaincodeID: fixed-asset
  #     bytesize: 8000
  #   callback: benchmarks/lib/create-asset.js
  - label: create-asset-16000
    description: Test a submitTransaction() Gateway method against the NodeJS `fixed-asset` Smart Contract method named `createAsset`, which inserts an asset of size 16000 bytes into the World State database.
    chaincodeID: fixed-asset
    txDuration: 300
    rateControl: { type: fixed-backlog,  opts: { unfinished_per_client: 10 } }
    arguments:
      chaincodeID: fixed-asset
      bytesize: 16000
    callback: benchmarks/lib/create-asset.js
  - label: create-asset-32000
    description: Test a submitTransaction() Gateway method against the NodeJS `fixed-asset` Smart Contract method named `createAsset`, which inserts an asset of size 32000 bytes into the World State database.
    chaincodeID: fixed-asset
    txDuration: 300
    rateControl: { type: fixed-backlog,  opts: { unfinished_per_client: 10 } }
    arguments:
      chaincodeID: fixed-asset
      bytesize: 32000
    callback: benchmarks/lib/create-asset.js
  - label: create-asset-64000
    description: Test a submitTransaction() Gateway method against the NodeJS `fixed-asset` Smart Contract method named `createAsset`, which inserts an asset of size 64000 bytes into the World State database.
    chaincodeID: fixed-asset
    txDuration: 300
    rateControl: { type: fixed-backlog,  opts: { unfinished_per_client: 10 } }
    arguments:
      chaincodeID: fixed-asset
      bytesize: 64000
    callback: benchmarks/lib/create-asset.js
monitor:
  type: none
