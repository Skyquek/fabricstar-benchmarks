test:
  name: fixed-asset
  description: >-
    This is a duration based benchmark targeting a Hyperledger Fabric network
    using the `fixed-asset` NodeJS chaincode
    contract that is interacted with via a Fabric-SDK-Node Gateway. Each test
    round flexes a single chaincode method, and includes a null-operation to act
    as a performance cost baseline.
  workers:
    type: local
    number: 8
  rounds:
    - label: empty-contract-evaluate
      description: >-
        Test an evaluateTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `nullResponse`, which
        immediately returns a null response. This represents the fastest
        possible round trip time for an evaluateTransaction() method that does
        not touch the world state or perform any action.
      chaincodeID: fixed-asset
      txDuration: 60
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 100
      workload:
        module: benchmarks/lib/empty-contract.js
        arguments:
          chaincodeID: fixed-asset
          consensus: false
    - label: empty-contract-submit
      description: >-
        Test a submitTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `nullResponse`, which
        immediately returns a null response. This represents the fastest
        possible round trip time for a submitTransaction() method that does not
        touch the world state or perform any action.
      chaincodeID: fixed-asset
      txDuration: 60
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 100
      workload:
        module: benchmarks/lib/empty-contract.js
        arguments:
          chaincodeID: fixed-asset
          consensus: true
    - label: create-asset-100
      description: >-
        Test a submitTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `create`, which performs a
        `putState()` operation on an asset of size 100 bytes.
      chaincodeID: fixed-asset
      txDuration: 60
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 100
      workload:
        module: benchmarks/lib/create-asset.js
        arguments:
          chaincodeID: fixed-asset
          byteSize: 100
    - label: get-asset-evaluate-100
      description: >-
        Test a evaluateTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `getAsset`. This method
        performs a `getState()` operation for a passed UUID, retrieving as asset
        of size 100 bytes.
      chaincodeID: fixed-asset
      txDuration: 60
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 100
      workload:
        module: benchmarks/lib/get-asset.js
        arguments:
          chaincodeID: fixed-asset
          noSetup: true
          byteSize: 100
          assets: 500
          consensus: false
    - label: get-asset-submit-100
      description: >-
        Test a submitTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `getAsset`. This method
        performs a `getState()` operation for a passed UUID, retrieving as asset
        of size 100 bytes. This test includes involvement of the orderer, and
        appending to the ledger.
      chaincodeID: fixed-asset
      txDuration: 60
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 100
      workload:
        module: benchmarks/lib/get-asset.js
        arguments:
          chaincodeID: fixed-asset
          noSetup: true
          byteSize: 100
          assets: 500
          consensus: true
    - label: range-query-evaluate-0
      description: >-
        Test an evaluateTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `paginatedRangeQuery`. This
        method performs a paginated range query that matches no assets in the
        world state database.
      chaincodeID: fixed-asset
      txDuration: 60
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 100
      workload:
        module: benchmarks/lib/range-query-asset.js
        arguments:
          chaincodeID: fixed-asset
          byteSize: 100
          range: 200
          offset: 100
          noSetup: true
          pagesize: '10'
          nomatch: true
          consensus: false
    - label: range-query-evaluate-100
      description: >-
        Test an evaluateTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `paginatedRangeQuery`. This
        method performs a paginated range query, with a passed pagesize of 10
        and a range keys that bound 200 assets created by the calling client.
        Each returned asset is of size 100 bytes.
      chaincodeID: fixed-asset
      txDuration: 60
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 100
      workload:
        module: benchmarks/lib/range-query-asset.js
        arguments:
          chaincodeID: fixed-asset
          byteSize: 100
          range: 200
          offset: 100
          noSetup: true
          pagesize: '10'
          consensus: false
    - label: range-query-submit-0
      description: >-
        Test a submitTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `paginatedRangeQuery`. This
        method performs a paginated range query that matches no items in the
        world state database. This test includes involvement of the orderer, and
        appending to the ledger.
      chaincodeID: fixed-asset
      txDuration: 60
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 100
      workload:
        module: benchmarks/lib/range-query-asset.js
        arguments:
          chaincodeID: fixed-asset
          byteSize: 100
          range: 200
          offset: 100
          noSetup: true
          pagesize: '10'
          nomatch: true
          consensus: true
    - label: range-query-submit-100
      description: >-
        Test a submitTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `paginatedRangeQuery`. This
        method performs a paginated range query, with a passed pagesize of 10
        and a range keys that bound 200 assets created by the calling client.
        Each returned asset is of size 100 bytes. This test includes
        involvement of the orderer, and appending to the ledger.
      chaincodeID: fixed-asset
      txDuration: 60
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 100
      workload:
        module: benchmarks/lib/range-query-asset.js
        arguments:
          chaincodeID: fixed-asset
          byteSize: 100
          range: 200
          offset: 100
          noSetup: true
          pagesize: '10'
          consensus: true
monitors:
    resource:
    - module: prometheus
      options:
        url: "http://prometheus:9090"
        metrics:
          include: [dev-.*, couch, peer, orderer]
          queries:
          - name: Avg Memory (MB)
            query: 'sum(container_memory_rss{name=~".+"}) by (name)'
            step: 10
            label: name
            statistic: avg
            multiplier: 0.000001
          - name:   CPU (%)
            query: sum(rate(container_cpu_usage_seconds_total{name=~".+"}[1m])) by (name)
            step: 10
            label: name
            statistic: avg
            multiplier: 100
          - name: Network In (MB)
            query: sum(rate(container_network_receive_bytes_total{name=~".+"}[1m])) by (name)
            step: 10
            label: name
            statistic: sum
            multiplier: 0.000001
          - name: Network Out (MB)
            query: sum(rate(container_network_transmit_bytes_total{name=~".+"}[1m])) by (name)
            step: 10
            label: name
            statistic: sum
            multiplier: 0.000001
          - name: Disc Write (MB)
            query: sum(rate(container_fs_writes_bytes_total{name=~".+"}[1m])) by (name)
            step: 10
            label: name
            statistic: sum
            multiplier: 0.000001
          - name: Disc Read (MB)
            query: sum(rate(container_fs_reads_bytes_total{name=~".+"}[1m])) by (name)
            step: 10
            label: name
            statistic: sum
            multiplier: 0.000001

observer:
  type: prometheus
  interval: 5            