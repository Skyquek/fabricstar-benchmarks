---
test:
  name: fixed-asset-levelDB
  description: This is a duration based benchmark targeting a Hyperledger Fabric network with a LevelDB world state database using the `fixed-asset` NodeJS chaincode contract that is interacted with via 
    a Fabric-SDK-Node Gateway. Each test round flexes a single chaincode method, and includes a null-operation to act as a performance cost baseline.
  workers:
    type: local
    number: 4
  rounds:
  - label: empty-contract-evaluate
    description: Test an evaluateTransaction() Gateway method against the NodeJS `fixed-asset` Smart Contract method named `nullResponse`, which immediately returns a null response. This represents the fastest possible round trip time for an evaluateTransaction() method.
    chaincodeID: fixed-asset
    txDuration: 10
    rateControl: { type: fixed-backlog,  opts: { unfinished_per_client: 15, startingTps: 10} }
    arguments:
      chaincodeID: fixed-asset
      consensus: false
    callback: benchmarks/lib/empty-contract.js
  - label: empty-contract-submit
    description: Test a submitTransaction() Gateway method against the NodeJS `fixed-asset` Smart Contract method named `nullResponse`, which immediately returns a null response. This represents the fastest possible round trip time for a submitTransaction() method.
    chaincodeID: fixed-asset
    txDuration: 10
    rateControl: { type: fixed-backlog,  opts: { unfinished_per_client: 15, startingTps: 10} }
    arguments:
      chaincodeID: fixed-asset
      consensus: true
    callback: benchmarks/lib/empty-contract.js
  - label: create-asset-1000
    description: Test a submitTransaction() Gateway method against the NodeJS `fixed-asset` Smart Contract method named `create`, which inserts an Asset of size 1000 bytes into the World State database.
    chaincodeID: fixed-asset
    txDuration: 10
    rateControl: { type: fixed-backlog,  opts: { unfinished_per_client: 15, startingTps: 10} }
    arguments:
      chaincodeID: fixed-asset
      bytesize: 1000
    callback: benchmarks/lib/create-asset.js
  - label: get-asset-evaluate-1000
    description: Test a evaluateTransaction() Gateway method against the NodeJS `fixed-asset` Smart Contract method named `getAsset`. This method performs a `getState()` operation for a passed UUID, retrieving as asset of size 1000 bytes. 
    chaincodeID: fixed-asset
    txDuration: 10
    rateControl: { type: fixed-backlog,  opts: { unfinished_per_client: 15, startingTps: 10} }
    arguments:
      chaincodeID: fixed-asset
      nosetup: true
      bytesize: 1000
      uuid: '500'
      consensus: false
    callback: benchmarks/lib/get-asset.js
  - label: get-asset-submit-1000
    description: Test a submitTransaction() Gateway method against the NodeJS `fixed-asset` Smart Contract method named `getAsset`. This method performs a `getState()` operation for a passed UUID, retrieving as asset of size 1000 bytes. This test includes involvement of the orderer, and appending to the ledger.
    chaincodeID: fixed-asset
    txDuration: 10
    rateControl: { type: fixed-backlog,  opts: { unfinished_per_client: 15, startingTps: 10} }
    arguments:
      chaincodeID: fixed-asset
      nosetup: true
      bytesize: 1000
      uuid: '500'
      consensus: true
    callback: benchmarks/lib/get-asset.js
  
monitor:
  type:
  - prometheus
  prometheus:  
    url: "http://prometheus:9090"
    push_url: "http://pushGateway:9091"
    metrics:
      ignore: [prometheus, pushGateway, cadvisor, grafana, node-exporter, ca.org1.example.com, ca.org2.example.com]
      include:
        Avg Memory (MB):
          query: sum(container_memory_rss{name=~".+"}) by (name)
          step: 10
          label: name		
          statistic: avg
          multiplier: 0.000001
        CPU (%):
          query: sum(rate(container_cpu_usage_seconds_total{name=~".+"}[1m])) by (name)
          step: 10
          label: name		
          statistic: avg
          multiplier: 100
        Network In (MB):
          query: sum(rate({name=~".+"}[1m])) by (name)
          step: 10
          label: name		
          statistic: sum
          multiplier: 0.000001
        Network Out (MB):
          query: sum(rate(container_network_transmit_bytes_total{name=~".+"}[1m])) by (name)
          step: 10
          label: name		
          statistic: sum
          multiplier: 0.000001
        Disc Write (MB):
          query: sum(rate(container_fs_writes_bytes_total{name=~".+"}[1m])) by (name)
          step: 10
          label: name		
          statistic: sum
          multiplier: 0.000001
        Disc Read (MB):
          query: sum(rate(container_fs_reads_bytes_total{name=~".+"}[1m])) by (name)
          step: 10
          label: name		
          statistic: sum
          multiplier: 0.000001

observer:
  type: prometheus
  interval: 10
